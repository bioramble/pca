geom_tile() +
scale_fill_gradient(low = "red", high = "green") +
stat_contour(aes(z = ppv), breaks = 0.5) +
facet_wrap(~ alpha, ncol = 2) +
geom_rect(xmin = 0, xmax = 0.25, ymin = 0, ymax = 0.25, fill = NA, color = "black", linetype = 2) +
annotate("text", label = "HTS", x = 0.125, y = 0.125, size = 16) +
xlab("prior") + ylab("power") +
theme_classic(base_size = 24)
ggplot(grid, aes(x = prior, y = power, fill = ppv)) +
geom_tile() +
scale_fill_gradient(low = "red", high = "green") +
stat_contour(aes(z = ppv), breaks = 0.5) +
facet_wrap(~ alpha, ncol = 2) +
geom_rect(xmin = 0, xmax = 0.25, ymin = 0, ymax = 0.25, fill = NA, color = "black", linetype = 2) +
annotate("text", label = "HTS", x = 0.125, y = 0.125, size = 12) +
xlab("prior") + ylab("power") +
theme_classic(base_size = 24)
############################################################################
# Bioramble
# A closer look at the fisherman's dilemma
# by Jesse Lipp
# Aug 7, 2015
############################################################################
# --------------------------------------------------------------------------
# Set up environment
# --------------------------------------------------------------------------
# clean-up
rm(list = ls())
# load libraries
library(ggplot2)
library(reshape2)
# --------------------------------------------------------------------------
# prepare data
# --------------------------------------------------------------------------
# function to calculate positive predictive value (PPV)
calc_ppv <- function(prior, power, alpha) {
power * prior / (power * prior + alpha * (1 - prior))
}
# establish domain to calculate PPV
prior <- seq(0, 1, length.out = 100)
power <- seq(0, 1, length.out = 100)
# alphas to calculate PPV contour
alpha <- c(0.1, 0.05, 0.01, 0.001)
# set up grid to calculate all combinations of prior and power
grid <- expand.grid(list(prior = prior, power = power))
# calculate PPV for all combinations of prior and power for all levels of alpha
ppv <- mapply(calc_ppv, grid$prior,  grid$power, MoreArgs = list(alpha = alpha))
rownames(ppv) <- alpha
grid <- cbind(grid, t(ppv))
grid <- melt(grid,
id = c("prior", "power"),
value.name = "PPV",
variable.name = "alpha")
# plot contours
ggplot(grid, aes(x = prior, y = power, fill = PPV)) +
geom_tile() +
scale_fill_gradient(low = "red", high = "green") +
stat_contour(aes(z = PPV), breaks = 0.5) +
facet_wrap(~ alpha, ncol = 2) +
geom_rect(xmin = 0, xmax = 0.25, ymin = 0, ymax = 0.25, fill = NA, color = "black", linetype = 3, linewidth = 0.5) +
annotate("text", label = "HTS", x = 0.125, y = 0.125, size = 12) +
xlab("prior") + ylab("power") +
theme_classic(base_size = 24)
# plot contours
ggplot(grid, aes(x = prior, y = power, fill = PPV)) +
geom_tile() +
scale_fill_gradient(low = "red", high = "green") +
stat_contour(aes(z = PPV), breaks = 0.5) +
facet_wrap(~ alpha, ncol = 2) +
geom_rect(xmin = 0, xmax = 0.25, ymin = 0, ymax = 0.25, fill = NA, color = "black", linetype = 3, linewidth = 0.5) +
annotate("text", label = "HTS", x = 0.125, y = 0.125, size = 12) +
xlab("prior") + ylab("power") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
panel.border = element_rect(colour = "black"))
############################################################################
# Bioramble
# A closer look at the fisherman's dilemma
# by Jesse Lipp
# Aug 7, 2015
############################################################################
# --------------------------------------------------------------------------
# Set up environment
# --------------------------------------------------------------------------
# clean-up
rm(list = ls())
# load libraries
library(ggplot2)
library(reshape2)
# --------------------------------------------------------------------------
# prepare data
# --------------------------------------------------------------------------
# function to calculate positive predictive value (PPV)
calc_ppv <- function(prior, power, alpha) {
power * prior / (power * prior + alpha * (1 - prior))
}
# establish domain to calculate PPV
prior <- seq(0, 1, length.out = 100)
power <- seq(0, 1, length.out = 100)
# alphas to calculate PPV contour
alpha <- c(0.1, 0.05, 0.01, 0.001)
# set up grid to calculate all combinations of prior and power
grid <- expand.grid(list(prior = prior, power = power))
# calculate PPV for all combinations of prior and power for all levels of alpha
ppv <- mapply(calc_ppv, grid$prior,  grid$power, MoreArgs = list(alpha = alpha))
# correct 0-division
ppv[is.na(ppv)] <- 0
rownames(ppv) <- alpha
grid <- cbind(grid, t(ppv))
grid <- melt(grid,
id = c("prior", "power"),
value.name = "PPV",
variable.name = "alpha")
# plot contours
ggplot(grid, aes(x = prior, y = power, fill = PPV)) +
geom_tile() +
scale_fill_gradient(low = "red", high = "green") +
stat_contour(aes(z = PPV), breaks = 0.5) +
facet_wrap(~ alpha, ncol = 2) +
geom_rect(xmin = 0, xmax = 0.25, ymin = 0, ymax = 0.25, fill = NA, color = "black", linetype = 3, linewidth = 0.5) +
annotate("text", label = "HTS", x = 0.125, y = 0.125, size = 10) +
xlab("prior") + ylab("power") +
theme_bw(base_size = 16) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
panel.border = element_rect(colour = "black"))
############################################################################
# Bioramble
# A closer look at the fisherman's dilemma
# by Jesse Lipp
# Aug 7, 2015
############################################################################
# --------------------------------------------------------------------------
# Set up environment
# --------------------------------------------------------------------------
# clean-up
rm(list = ls())
# load libraries
library(ggplot2)
library(reshape2)
# --------------------------------------------------------------------------
# prepare data
# --------------------------------------------------------------------------
# function to calculate positive predictive value (PPV)
calc_ppv <- function(prior, power, alpha) {
power * prior / (power * prior + alpha * (1 - prior))
}
# establish domain to calculate PPV
prior <- seq(0, 1, length.out = 100)
power <- seq(0, 1, length.out = 100)
# alphas to calculate PPV contour
alpha <- c(0.1, 0.05, 0.01, 0.001)
# set up grid to calculate all combinations of prior and power
grid <- expand.grid(list(prior = prior, power = power))
# calculate PPV for all combinations of prior and power for all levels of alpha
ppv <- mapply(calc_ppv, grid$prior,  grid$power, MoreArgs = list(alpha = alpha))
# correct 0-division
ppv[is.na(ppv)] <- 0
rownames(ppv) <- alpha
grid <- cbind(grid, t(ppv))
grid <- melt(grid,
id = c("prior", "power"),
value.name = "PPV",
variable.name = "alpha")
# plot contours
ggplot(grid, aes(x = prior, y = power, fill = PPV)) +
geom_tile() +
scale_fill_gradient(low = "red", high = "green") +
stat_contour(aes(z = PPV), breaks = 0.5) +
facet_wrap(~ alpha, ncol = 2) +
geom_rect(xmin = 0, xmax = 0.25, ymin = 0, ymax = 0.25, fill = NA, color = "black", linetype = 3, linewidth = 0.5) +
annotate("text", label = "HTS", x = 0.125, y = 0.125, size = 10) +
xlab("prior") + ylab("power") +
theme_bw(base_size = 18) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
panel.border = element_rect(color = "black"))
############################################################################
# Bioramble
# A closer look at the fisherman's dilemma
# by Jesse Lipp
# Aug 7, 2015
############################################################################
# --------------------------------------------------------------------------
# Set up environment
# --------------------------------------------------------------------------
# clean-up
rm(list = ls())
# load libraries (install if needed)
if (!require(ggplot2)) {
install.packages("ggplot2")
}
if (!require(reshape2)) {
install.packages("reshape2")
}
calc_ppv <- function(prior, power, alpha) {
power * prior / (power * prior + alpha * (1 - prior))
}
# establish domain to calculate PPV
prior <- seq(0, 1, length.out = 100)
power <- seq(0, 1, length.out = 100)
# alphas to calculate PPV contour
alpha <- c(0.1, 0.05, 0.01, 0.001)
# set up grid to calculate all combinations of prior and power
grid <- expand.grid(list(prior = prior, power = power))
# calculate PPV for all combinations of prior and power for all levels of alpha
ppv <- mapply(calc_ppv, grid$prior,  grid$power, MoreArgs = list(alpha = alpha))
# correct 0-division
ppv[is.na(ppv)] <- 0
# combine data into single data frame
rownames(ppv) <- alpha
grid <- cbind(grid, t(ppv))
# create long form for plotting with ggplot2
grid <- melt(grid,
id = c("prior", "power"),
value.name = "PPV",
variable.name = "alpha")
ggplot(grid, aes(x = prior, y = power, fill = PPV)) +
# color gradient from green to red
geom_tile() +
scale_fill_gradient(low = "red", high = "green") +
# contour line at PPV = 0.5
stat_contour(aes(z = PPV), breaks = 0.5) +
# facets
facet_wrap(~ alpha, ncol = 2) +
# rectangle specifying the region of most high-throughput screens
geom_rect(xmin = 0, xmax = 0.25, ymin = 0, ymax = 0.25, fill = NA, color = "black", linetype = 3) +
annotate("text", label = "HTS", x = 0.125, y = 0.125, size = 10) +
# labeling
xlab("Prior") + ylab("Power") +
# theme tweaking
theme_bw(base_size = 18) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
panel.border = element_rect(color = "black"))
source('~/bioramble/fishing/fishing_part2.R', echo=TRUE)
data(state)
data(state.abb)
state <- state.x77
rownames(state) <- state.abb
head(state)
state
help(state)
pc <- prcomp(state, .scale = TRUE)
pc <- prcomp(state, center = TRUE, .scale = TRUE)
biplot(pc)
screeplot(pc, type = "l")
?prcomp
pc <- prcomp(state, center = TRUE, .scale = TRUE)
screeplot(pc, type = "l")
biplot(pc)
biplot(pc, var.axes = 2:3)
biplot(pc, var.axes = c(1, 3))
warnings()
pc$rotation
pc
pc
screeplot(pc)
screeplot(pc$sdev)
?screeplot
data(state)
state <- state.x77
rownames(state) <- state.abb
pc <- prcomp(state, center = TRUE, scale. = TRUE)
screeplot(pc, type = "l")
biplot(pc)
?biplot.princomp
biplot(pc, choices = 2:3)
############################################################################
# Bioramble
# PCA - Part 3: In the trenches
# by Jesse Lipp
# Aug 16, 2015
############################################################################
# --------------------------------------------------------------------------
# Set up environment
# --------------------------------------------------------------------------
# clean-up
rm(list = ls())
# load libraries (install if needed)
if (!require(ggplot2)) {
install.packages("ggplot2")
}
if (!require(reshape2)) {
install.packages("reshape2")
}
# ----------------------------------------------------------
# Load data
# ----------------------------------------------------------
# set file directory
setwd("~/bioramble/pca/")
# read data sets
# prepared using "pca_part3_data_preparation.R"
read.table(measurements, file = "pca_part3_measurements.txt")
read.table(description, file = "pca_part3_description.txt")
measurements <- read.table(measurements, file = "pca_part3_measurements.txt")
description <- read.table(description, file = "pca_part3_description.txt")
setwd("~/bioramble/pca/")
measurements <- read.table("pca_part3_measurements.txt")
description <- read.table("pca_part3_description.txt")
pc <- prcomp(measurements, retx = TRUE, center = TRUE, scale. = TRUE)
screeplot(pc, npcs = 20, type = "l", main = "Screeplot")
var_expl <- c(0, cumsum(pc$sdev) / sum(pc$sdev))
# plot explained variance
plot(var_expl, type = "l", ylim = c(0, 1), lwd = 2,
xlab = "Principal Components", ylab = "Variance explained")
# plot number of components needed to for common cut-offs of variance explained
vars <- c(0.5, 0.8, 0.9, 0.95)
for (v in vars) {
npc <- which(var_expl > v)[1]
lines(x = c(0, npc, npc), y = c(v, v, 0), lty = 3)
text(x = npc, y = v - 0.05, labels = npc, pos = 4)
points(x = npc, y = v)
}
# histogram for correlation of feature
par(mfrow = c(2, 1))
# correlation of features before PCA
cor_m <- cor(measurements)
cor_m <- cor_m[upper.tri(cor_m)]
hist(cor_m, prob = TRUE, xlim = c(-1, 1), breaks = 40, col = "mistyrose",
main = "Before PCA", xlab = "Feature Correlation")
# correlation of features after PCA (principal components)
cor_r <- cor(pc$x)
cor_r <- cor_r[upper.tri(cor_r)]
hist(cor_r, prob = TRUE, xlim = c(-1, 1), breaks = 40, col = "mistyrose",
main = "After PCA", xlab = "Feature Correlation")
par(mfrow = c(3, 2))
for (n in seq(1, 12, 2)) {
plot(pc$x[, n:(n+1)], col = description$activity_code, pch = 16)
}
par(mfrow = c(2, 2))
for (n in seq(1, 8, 2)) {
plot(pc$x[, n:(n+1)], col = description$activity_code, pch = 16)
}
# using ggplot
proj <- pc$x[, 1:8]
# convert data into long form
proj <- melt(proj, value.name = "weight", varnames = c("id", "pc"))
proj$pc <- as.integer(str_replace(proj$pc, "PC", ""))
# plot odd-numbered PCs on x-axis and even-numbered PCs on y-axis
proj$coord <- ifelse(proj$pc %% 2 == 1, "x", "y")
# define groups of PCs to plot against each other
proj$group <- round(proj$pc / 2 + 0.1)
proj$group <- paste0("PC", (2*proj$group)-1, " vs. PC", 2*proj$group)
# reformat to have x and y column
proj <- dcast(proj, id + group ~ coord, value.var = "weight")
# add activity information
proj$Activity <- tolower(description$activity_name[proj$id])
# plot data as 2x2 facets
ggplot(proj, aes(x = x, y = y, col = Activity)) +
# scatterplot
geom_point() +
scale_color_manual(values = c("black", "red", "green", "blue", "cyan", "magenta")) +
# facets
facet_wrap( ~ group, ncol = 2) +
# labels
xlab("Principal Component") + ylab("Principal Component") +
# appearance
theme_bw(base_size = 18) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
legend.key = element_blank(),
panel.border = element_rect(color = "black")) +
guides(color = guide_legend(override.aes = list(size = 5)))
str(pc)
?prcomp
pc <- prcomp(measurements, retx = TRUE, center = TRUE, scale. = TRUE)
proj <- pc$x[, 1:8]
# convert data into long form
proj <- melt(proj, value.name = "weight", varnames = c("id", "pc"))
proj$pc <- as.integer(str_replace(proj$pc, "PC", ""))
if (!require(stringr)) {
install.packages("stringr")
}
proj <- pc$x[, 1:8]
# convert data into long form
proj <- melt(proj, value.name = "weight", varnames = c("id", "pc"))
proj$pc <- as.integer(str_replace(proj$pc, "PC", ""))
# plot odd-numbered PCs on x-axis and even-numbered PCs on y-axis
proj$coord <- ifelse(proj$pc %% 2 == 1, "x", "y")
# define groups of PCs to plot against each other
proj$group <- round(proj$pc / 2 + 0.1)
proj$group <- paste0("PC", (2*proj$group)-1, " vs. PC", 2*proj$group)
# reformat to have x and y column
proj <- dcast(proj, id + group ~ coord, value.var = "weight")
# add activity information
proj$Activity <- tolower(description$activity_name[proj$id])
# plot data as 2x2 facets
ggplot(proj, aes(x = x, y = y, col = Activity)) +
# scatterplot
geom_point() +
scale_color_manual(values = c("black", "red", "green", "blue", "cyan", "magenta")) +
# facets
facet_wrap( ~ group, ncol = 2) +
# labels
xlab("Principal Component") + ylab("Principal Component") +
# appearance
theme_bw(base_size = 18) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
legend.key = element_blank(),
panel.border = element_rect(color = "black")) +
guides(color = guide_legend(override.aes = list(size = 5)))
head(description)
legend("topright", col = 1:6, legend = unique(description$activity_name))
par(mfrow = c(2, 2))
for (n in seq(1, 8, 2)) {
plot(pc$x[, n:(n+1)], col = description$activity_code, pch = 16)
}
legend("topright", col = 1:6, legend = unique(description$activity_name))
?scale
measurements_scaled <- scale(measurements, center = TRUE, scale = TRUE)
svd <- svd(measurements_scaled)
measurements_scaled <- scale(measurements, center = TRUE, scale = TRUE)
# perform singular value decomposition
svd <- svd(measurements_scaled)
# compare eigenvector matrices of "prcomp" ("loadings") and "svd" (right eigenvectors)
# prcomp stores loadings in "rotation"
rot <- pc$rotation
dimnames(rot) = NULL
# svd stores right eigenvectors in matrix "v"
v <- svd$v
# check if the two matrices are equal
all.equal(v, rot)
all.equal(pc$sdev, svd$d)
all.equal(pc$sdev, svd$d^2)
head(pc$sdev)
head(svd$d)
all.equal(pc$sdev, sqrt(svd$d))
all.equal(pc$sdev^2, sqrt(svd$d))
pc$sdev^2
str(svd$d)
?svd
?prcomp
head(svd$d)
head(pc$sdev&2)
head(pc$sdev^2)
class(svd$d)
class(pc$sdev)
head(pc$sdev^2 / svd$d)
head(pc$sdev^2 - svd$d)
svd$d^2/560
head(svd$d^2/560)
head(pc$sdev^2)
plot(cumsum(svd$d^2)/sum(svd$d^2))
svd$d^2[1]/sum(svd$d^2)
svd$d^2[1]/sum(svd$d^2)
svd$d^2[1]
svd$d^2
(svd$d^2)[1]
(svd$d^2)[1]/sum(svd$d^2)
(svd$d)[1]/sum(svd$d)
pc$sdev[1]/sum(pc$sdev)
(svd$d)[1]/sum(svd$d) == pc$sdev[1]/sum(pc$sdev)
almost.equal((svd$d)[1]/sum(svd$d), pc$sdev[1]/sum(pc$sdev))
?almost
??almost
l
all.equal((svd$d)[1]/sum(svd$d), pc$sdev[1]/sum(pc$sdev))
head(pc$sdev)
head(svd$d)
head(pc$sdev*560)
head(sqrt(pc$sdev*560))
head(pc$sdev^2)
var_expl <- c(0, cumsum(pc$sdev^2) / sum(pc$sdev^2))
var_expl <- c(0, cumsum(pc$sdev^2) / sum(pc$sdev^2))
# plot explained variance
plot(var_expl, type = "l", lwd = 2, ylim = c(0, 1),
xlab = "Principal Components", ylab = "Variance explained")
# plot number of components needed to for common cut-offs of variance explained
vars <- c(0.5, 0.8, 0.9, 0.95)
for (v in vars) {
npc <- which.min(var_expl > v)
lines(x = c(0, npc, npc), y = c(v, v, 0), lty = 3)
text(x = npc, y = v - 0.05, labels = npc, pos = 4)
points(x = npc, y = v)
}
par(mfrow = c(1, 1))
var_expl <- c(0, cumsum(pc$sdev^2) / sum(pc$sdev^2))
# plot explained variance
plot(var_expl, type = "l", lwd = 2, ylim = c(0, 1),
xlab = "Principal Components", ylab = "Variance explained")
# plot number of components needed to for common cut-offs of variance explained
vars <- c(0.5, 0.8, 0.9, 0.95)
for (v in vars) {
npc <- which(var_expl > v)[1]
lines(x = c(0, npc, npc), y = c(v, v, 0), lty = 3)
text(x = npc, y = v - 0.05, labels = npc, pos = 4)
points(x = npc, y = v)
}
screeplot(pc, npcs = 20, type = "l", main = "Screeplot")
head(var_expl)
ve <- cumsum(svd$d)/sum(svd$d)
head(ve)
ve <- cumsum(svd$d^2)/sum(svd$d^2)
head(ve)
all.equal((svd$d^2)/sum(svd$d), pc$sdev^2/sum(pc$sdev^2))
all.equal(cumsum(svd$d^2)/sum(svd$d), cumsum(pc$sdev^2)/sum(pc$sdev^2))
cumsum(svd$d^2)
all.equal(cumsum(svd$d^2)/sum(svd$d^2), cumsum(pc$sdev^2)/sum(pc$sdev^2))
svd$d^2 - pc$sdev^2
head(svd$d^2 - pc$sdev^2)
head(svd$d^2 / pc$sdev^2)
560/2
sqrt(560^2)
